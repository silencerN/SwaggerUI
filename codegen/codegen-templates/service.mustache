'use strict';

{{#operations}}
{{#operation}}

exports.{{{operationId}}} = function(req, res, callback) {
/**
{{#summary}}
    * {{{summary}}}
{{/summary}}
{{#notes}}
    * {{{notes}}}
{{/notes}}
*
{{#allParams}}
    * {{paramName}} [{{{dataType}}} ] {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
    * no response value expected for this operation
{{/returnType}}
{{#returnType}}
    * returns {{{returnType}}}
{{/returnType}}
**/

{{#allParams}}
    var {{paramName}} =req.query.{{paramName}};
{{/allParams}}

    var spName = "[ ]";
    var params = {
        {{#allParams}}
            {{paramName}}:{ value:{{paramName}}, sqlType: maindb.sqlType.{{dataType}} },
        {{/allParams}}
            OUT_ERRORCODE: {sqlType: maindb.sqlType.Int, direction: maindb.direction.output},
            OUT_SQLCODE: {sqlType: maindb.sqlType.Int, direction: maindb.direction.output}
    };
    maindb.exec(spName, params, function (ret) {
        callback({Error: ret.output.OUT_ERRORCODE !== null && ret.output.OUT_ERRORCODE !== 0, Message: ret.output.OUT_SQLCODE, Result: ret.recordsets[0] ? ret.recordsets[0] : [] });
    });
/**

{{#returnType}}
    var examples = {};
    {{#examples}}
    examples['{{contentType}}'] = {{{example}}};
    {{/examples}}
    if (Object.keys(examples).length > 0) {
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify(examples[Object.keys(examples)[0]] || {}, null, 2));
    } else {
        res.end();
    }
    {{/returnType}}
    {{^returnType}}
        res.end();
    {{/returnType}}
**/
}

{{/operation}}
{{/operations}}
